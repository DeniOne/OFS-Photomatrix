import os
import logging
from typing import List
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞
root_env_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), '.env')
load_dotenv(root_env_path)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", mode="a", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class Config:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env
        self.BOT_TOKEN = os.getenv("BOT_TOKEN")
        if not self.BOT_TOKEN:
            logger.error("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (BOT_TOKEN) –≤ .env —Ñ–∞–π–ª–µ!")
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä BOT_TOKEN")
        
        # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env
        admin_ids = os.getenv("ADMIN_IDS", "")
        logger.info(f"üîë –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ .env, —Å—Ç—Ä–æ–∫–∞ ADMIN_IDS: '{admin_ids}'")
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —á–∏—Å–ª–æ–≤—ã—Ö ID, —Ç–∞–∫ –∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ —Å @
        self.ADMIN_IDS = []
        
        if not admin_ids.strip():
            logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ADMIN_IDS –≤ .env –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞")
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç—ã–º
            admin_ids_list = admin_ids.split(",")
            logger.info(f"üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ –∑–∞–ø—è—Ç—ã–º: {admin_ids_list}")
            
            for admin_id in admin_ids_list:
                admin_id = admin_id.strip()
                if not admin_id:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤")
                    continue
                
                logger.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∞: '{admin_id}'")
                
                # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É (—é–∑–µ—Ä–Ω–µ–π–º)
                if admin_id.startswith('@'):
                    logger.info(f"üë§ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —é–∑–µ—Ä–Ω–µ–π–º: '{admin_id}'")
                    self.ADMIN_IDS.append(admin_id)
                # –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ (ID)
                else:
                    try:
                        admin_id_int = int(admin_id)
                        logger.info(f"üî¢ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —á–∏—Å–ª–æ: {admin_id} -> {admin_id_int}")
                        self.ADMIN_IDS.append(admin_id_int)
                    except ValueError:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{admin_id}' –≤ —á–∏—Å–ª–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É")
                        self.ADMIN_IDS.append(admin_id)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {self.ADMIN_IDS}")
        logger.info(f"üìä –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤: {[f'{x} ({type(x)})' for x in self.ADMIN_IDS]}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env
        self.LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
        self.LOG_FILE = os.getenv("LOG_FILE", "bot.log")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env
        self.USE_REDIS = os.getenv("USE_REDIS", "False").lower() == "true"
        self.REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
        
        # URL API –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env
        self.API_URL = os.getenv("API_URL", "http://localhost:8000/api/v1")
        
        # –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –±–µ—Ä–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ URL
        self.API_WEBHOOK_ENDPOINT = os.getenv("API_WEBHOOK_ENDPOINT", f"{self.API_URL}/telegram-bot/webhook")
        self.API_TOKEN_VALIDATION_ENDPOINT = os.getenv("API_TOKEN_VALIDATION_ENDPOINT", f"{self.API_URL}/telegram-bot/validate-token")
        self.API_ORGANIZATIONS_ENDPOINT = os.getenv("API_ORGANIZATIONS_ENDPOINT", f"{self.API_URL}/organizations")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ –æ—Ç–¥–µ–ª–∞–º–∏
        self.API_POSITIONS_ENDPOINT = os.getenv("API_POSITIONS_ENDPOINT", f"{self.API_URL}/positions")
        self.API_DIVISIONS_ENDPOINT = os.getenv("API_DIVISIONS_ENDPOINT", f"{self.API_URL}/divisions")
        self.API_SECTIONS_ENDPOINT = os.getenv("API_SECTIONS_ENDPOINT", f"{self.API_URL}/sections")
        self.API_STAFF_ENDPOINT = os.getenv("API_STAFF_ENDPOINT", f"{self.API_URL}/staff")
        
        # API –∫–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env
        self.API_KEY = os.getenv("API_KEY", "")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if not self.API_URL.startswith("http"):
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL API: {self.API_URL}, –¥–æ–±–∞–≤–ª—è–µ–º http://")
            self.API_URL = f"http://{self.API_URL}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤
        if "localhost" in self.API_URL or "127.0.0.1" in self.API_URL:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π API –Ω–∞: {self.API_URL}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Ä—Ç—ã, –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            parsed_url = self.API_URL.split(':')
            if len(parsed_url) >= 3:
                base_part = ':'.join(parsed_url[:-1])
                port_part = parsed_url[-1].split('/')[0]
                try:
                    port = int(port_part)
                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    self.API_URL_ALTERNATIVES = [
                        f"{base_part}:{port}/api/v1",
                        f"{base_part}:{port+1}/api/v1",
                        f"{base_part}:{port-1}/api/v1"
                    ]
                    logger.info(f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã API: {self.API_URL_ALTERNATIVES}")
                except ValueError:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä—Ç –∏–∑ URL: {self.API_URL}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ .env
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è .env —Ñ–∞–π–ª: {root_env_path} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(root_env_path)})")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env
        self.MAX_REQUESTS_PER_MINUTE = int(os.getenv("MAX_REQUESTS_PER_MINUTE", "30"))
        self.MAX_REGISTRATION_ATTEMPTS = int(os.getenv("MAX_REGISTRATION_ATTEMPTS", "3"))
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self._ensure_log_directory()
        
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"URL API: {self.API_URL}")
        logger.info(f"Endpoint –ø–æ–∑–∏—Ü–∏–π: {self.API_POSITIONS_ENDPOINT}")
        logger.info(f"API –∫–ª—é—á: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if self.API_KEY else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    def _ensure_log_directory(self):
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        # –ï—Å–ª–∏ –ª–æ–≥-—Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if os.path.dirname(self.LOG_FILE) == '':
            logger.info(f"–õ–æ–≥-—Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {self.LOG_FILE}")
            return
            
        # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω—É–∂–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        log_dir = os.path.dirname(self.LOG_FILE)
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤: {log_dir}")
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        logger.info(f"üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –≤ Config: user_id={user_id} (—Ç–∏–ø: {type(user_id)})")
        logger.info(f"üìä –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ: {self.ADMIN_IDS}")
        logger.info(f"üìä –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤: {[f'{x} ({type(x)})' for x in self.ADMIN_IDS]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        direct_match = user_id in self.ADMIN_IDS
        logger.info(f"üîç –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ ID: {direct_match}")
        
        # –ï—Å–ª–∏ –ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        if not direct_match:
            str_id = str(user_id)
            str_match = str_id in self.ADMIN_IDS
            logger.info(f"üî¢ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ ID –≤ —Å—Ç—Ä–æ–∫—É: {user_id} -> '{str_id}', —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {str_match}")
            return str_match
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ –≤ Config: {direct_match}")
        return direct_match

    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8" 