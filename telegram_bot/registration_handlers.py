import logging
import re
from typing import Dict, Union, Any, Optional

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from database import BotDatabase
from states import RegistrationStates
import keyboards
from api_client import ApiClient
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", mode="a", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
db = BotDatabase()
api_client = ApiClient()
config = Config()

# –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = str(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    staff = db.get_employee_by_telegram_id(user_id)
    
    if staff:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.\n"
            f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {staff.get('position_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=keyboards.get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    pending_request = db.get_pending_request_by_telegram_id(user_id)
    
    if pending_request:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            f"–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞. –¢–µ–±–µ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.",
            reply_markup=keyboards.get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    invitation_code = db.get_active_invitation_code(user_id)
    
    if invitation_code:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–¥–∞
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            f"–î–ª—è —Ç–µ–±—è —É–∂–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –µ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=keyboards.get_reset_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        await message.bot.set_state(message.from_user.id, RegistrationStates.waiting_for_code, message.chat.id)
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –Ω–∏–∂–Ω—é—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!",
        reply_markup=ReplyKeyboardRemove()
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = [
        [InlineKeyboardButton(text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="start_registration")],
        [InlineKeyboardButton(text="üîë –£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–¥", callback_data="have_code")],
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about_bot")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")]
    ]
    inline_kb = InlineKeyboardMarkup(inline_keyboard=kb)
    
    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç OFS Global –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n"
        f"–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:",
        reply_markup=inline_kb
    )

@router.callback_query(F.data == "start_registration")
async def callback_registration_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    await callback.answer()
    
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    staff = db.get_employee_by_telegram_id(user_id)
    
    if staff:
        await callback.message.edit_text(
            "‚úÖ –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    pending_request = db.get_pending_request_by_telegram_id(user_id)
    
    if pending_request:
        await callback.message.edit_text(
            "‚è≥ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Å—å –æ—Ç–≤–µ—Ç–∞."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    invitation_code = db.get_active_invitation_code(user_id)
    
    if invitation_code:
        await callback.message.edit_text(
            "üë®‚Äçüíº –î–ª—è —Ç–µ–±—è —É–∂–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –µ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        await state.set_state(RegistrationStates.waiting_for_code)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º telegram_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(telegram_id=user_id)
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å username, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    if callback.from_user.username:
        await state.update_data(telegram_username=callback.from_user.username)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    full_name = f"{callback.from_user.first_name}"
    if callback.from_user.last_name:
        full_name += f" {callback.from_user.last_name}"
    
    await state.update_data(user_full_name=full_name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–º–µ–Ω–∏
    await state.set_state(RegistrationStates.waiting_for_name_confirmation)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–º–µ–Ω–∏
    kb = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_name"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="reject_name")
        ]
    ]
    confirmation_kb = InlineKeyboardMarkup(inline_keyboard=kb)
    
    await callback.message.edit_text(
        f"üë§ –¢–≤–æ–µ –∏–º—è –≤ Telegram: <b>{full_name}</b>\n\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏?",
        reply_markup=confirmation_kb
    )

@router.callback_query(F.data == "confirm_name", StateFilter(RegistrationStates.waiting_for_name_confirmation))
async def callback_confirm_name(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    await callback.answer()
    
    # –ò–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    await state.set_state(RegistrationStates.waiting_for_organization)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–∑ API
    organizations = await api_client.get_organizations()
    
    await callback.message.edit_text(
        "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:",
        reply_markup=keyboards.get_organizations_keyboard(organizations)
    )

@router.callback_query(F.data.startswith("org_"), StateFilter(RegistrationStates.waiting_for_organization))
async def process_organization_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑ callback.data
    organization_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π
    organizations = await api_client.get_organizations()
    
    # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    selected_organization = None
    for org in organizations:
        if org.get('id') == organization_id:
            selected_organization = org
            break
    
    if not selected_organization:
        await callback.message.edit_text(
            "‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        organization_id=organization_id,
        organization_name=selected_organization.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è')
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ (—Ç–µ–∫—Å—Ç–æ–º)
    await state.set_state(RegistrationStates.waiting_for_position)
    
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:"
    )

@router.callback_query(F.data == "reject_name", StateFilter(RegistrationStates.waiting_for_name_confirmation))
async def callback_reject_name(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    await callback.answer()
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è
    await state.set_state(RegistrationStates.waiting_for_name)
    
    await callback.message.edit_text(
        "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):"
    )

@router.callback_query(F.data == "have_code")
async def callback_have_code(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–¥'"""
    await callback.answer()
    
    await callback.message.edit_text(
        "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–ª—É—á–∏–ª:"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
    await state.set_state(RegistrationStates.waiting_for_code)

@router.callback_query(F.data == "check_status")
async def callback_check_status(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å'"""
    await callback.answer()
    
    user_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    staff = db.get_employee_by_telegram_id(user_id)
    
    if staff:
        await callback.message.edit_text(
            f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n"
            f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.\n"
            f"<b>–ò–º—è:</b> {staff.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {staff.get('position_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"üè† <a href='tg://bot_command?command=start'>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</a>"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    pending_request = db.get_pending_request_by_telegram_id(user_id)
    
    if pending_request:
        await callback.message.edit_text(
            f"‚è≥ <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n"
            f"–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {pending_request.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É.\n"
            f"üè† <a href='tg://bot_command?command=start'>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</a>"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    invitation_code = db.get_active_invitation_code(user_id)
    
    if invitation_code:
        await callback.message.edit_text(
            f"üîë <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n"
            f"–î–ª—è –≤–∞—Å —Å–æ–∑–¥–∞–Ω –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n"
            f"<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ:</b> {invitation_code.get('expires_at', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥.\n"
            f"üè† <a href='tg://bot_command?command=start'>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</a>"
        )
        return
    
    await callback.message.edit_text(
        "‚ùå <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>\n\n"
        "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'.\n\n"
        "üè† <a href='tg://bot_command?command=start'>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</a>"
    )

@router.callback_query(F.data == "about_bot")
async def callback_about_bot(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–û –±–æ—Ç–µ'"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚ÑπÔ∏è <b>–û –±–æ—Ç–µ</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ OFS Global.\n"
        "–í–µ—Ä—Å–∏—è: 1.0.0\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: OFS Development Team\n\n"
        "üè† <a href='tg://bot_command?command=start'>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</a>"
    )

@router.callback_query(F.data == "show_help")
async def callback_show_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–º–æ—â—å'"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'\n"
        "2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
        "4. –ï—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ 'üîë –£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–¥'\n\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.\n\n"
        "üè† <a href='tg://bot_command?command=start'>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</a>"
    )

def register_registration_handlers(dispatcher: Router):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    dispatcher.include_router(router) 