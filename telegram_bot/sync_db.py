import os
import logging
import psycopg2
import asyncio
import asyncpg
from psycopg2.extras import RealDictCursor
from typing import List, Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
load_dotenv(os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", ".env"))

DB_USER = os.getenv("DB_USER", "ofs_user")
DB_PASSWORD = os.getenv("DB_PASSWORD", "111")
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "5432")
DB_NAME = os.getenv("DB_NAME", "ofs_photomatrix")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
_divisions_cache = None
_sections_cache = None
_positions_cache = None

async def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
    try:
        conn = await asyncpg.connect(
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT,
            database=DB_NAME
        )
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {DB_HOST}:{DB_PORT}/{DB_NAME}")
        return conn
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

async def check_table_exists(conn, table_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î"""
    try:
        query = """
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = $1
            )
        """
        exists = await conn.fetchval(query, table_name)
        return exists
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return False

async def get_divisions_from_db() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–¥–µ–ª—ã –∏–∑ –ë–î"""
    global _divisions_cache
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –∫–µ—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
    if _divisions_cache is not None:
        return _divisions_cache
    
    conn = await get_db_connection()
    if not conn:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–æ–≤")
        return []
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        if not await check_table_exists(conn, 'divisions'):
            logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ 'divisions' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
            return []
            
        query = """
            SELECT id, name, code, is_active
            FROM divisions
            WHERE is_active = true
            ORDER BY name
        """
        rows = await conn.fetch(query)
        
        divisions = [dict(row) for row in rows]
        _divisions_cache = divisions
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(divisions)} –æ—Ç–¥–µ–ª–æ–≤ –∏–∑ –ë–î")
        return divisions
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª–æ–≤ –∏–∑ –ë–î: {e}")
        return []
    
    finally:
        await conn.close()

async def get_sections_from_db() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∫—Ü–∏–∏ –∏–∑ –ë–î"""
    global _sections_cache
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –∫–µ—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
    if _sections_cache is not None:
        return _sections_cache
    
    conn = await get_db_connection()
    if not conn:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ–∫—Ü–∏–π")
        return []
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        if not await check_table_exists(conn, 'sections'):
            logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ 'sections' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
            return []
            
        query = """
            SELECT id, name, code, division_id, is_active
            FROM sections
            WHERE is_active = true
            ORDER BY name
        """
        rows = await conn.fetch(query)
        
        sections = [dict(row) for row in rows]
        _sections_cache = sections
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(sections)} —Å–µ–∫—Ü–∏–π –∏–∑ –ë–î")
        return sections
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ–∫—Ü–∏–π –∏–∑ –ë–î: {e}")
        return []
    
    finally:
        await conn.close()

async def get_positions_from_db() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∏–∑ –ë–î"""
    global _positions_cache
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –≤ –∫–µ—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
    if _positions_cache is not None:
        return _positions_cache
    
    conn = await get_db_connection()
    if not conn:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π")
        return []
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        if not await check_table_exists(conn, 'positions'):
            logger.warning("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ 'positions' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
            return []
            
        query = """
            SELECT id, name, code, division_id, section_id, is_active
            FROM positions
            WHERE is_active = true
            ORDER BY name
        """
        rows = await conn.fetch(query)
        
        positions = [dict(row) for row in rows]
        _positions_cache = positions
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(positions)} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –∏–∑ –ë–î")
        return positions
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π –∏–∑ –ë–î: {e}")
        return []
    
    finally:
        await conn.close()

def clear_cache():
    """–û—á–∏—â–∞–µ—Ç –∫–µ—à –¥–∞–Ω–Ω—ã—Ö"""
    global _divisions_cache, _sections_cache, _positions_cache
    _divisions_cache = None
    _sections_cache = None
    _positions_cache = None
    logger.info("–ö–µ—à –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω")

async def sync_all_data() -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–µ—à –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î...")
    
    # –û—á–∏—â–∞–µ–º –∫–µ—à
    clear_cache()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à
    divisions = await get_divisions_from_db()
    sections = await get_sections_from_db()
    positions = await get_positions_from_db()
    
    if divisions or sections or positions:
        logger.info(f"‚úÖ –ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω: {len(divisions)} –æ—Ç–¥–µ–ª–æ–≤, {len(sections)} —Å–µ–∫—Ü–∏–π, {len(positions)} –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π")
        return True
    else:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–µ—à–∞")
        return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π –∫–æ–¥–∞
sync_divisions_from_db = get_divisions_from_db
sync_sections_from_db = get_sections_from_db
sync_positions_from_db = get_positions_from_db

# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if __name__ == "__main__":
    asyncio.run(sync_all_data()) 